{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/xoor/Desktop/a/exersice/github_users/GithubUsers/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2;import{gql}from\"@apollo/client\";export var searchQueryRepository=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query Repository(\\n    $query: String!\\n    $type: SearchType!\\n    $after: String\\n    $first: Int\\n  ) {\\n    search(query: $query, type: $type, after: $after, first: $first) {\\n      nodes {\\n        ... on Repository {\\n          name\\n          description\\n          url\\n          updatedAt\\n          createdAt\\n          id\\n        }\\n      }\\n      pageInfo {\\n        endCursor\\n        hasNextPage\\n      }\\n      repositoryCount\\n    }\\n  }\\n\"])));export var searchQueryUsers=gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  query Users(\\n    $query: String!\\n    $type: SearchType!\\n    $after: String\\n    $first: Int\\n  ) {\\n    search(query: $query, type: $type, after: $after, first: $first) {\\n      nodes {\\n        ... on User {\\n          id\\n          email\\n          location\\n          name\\n          url\\n        }\\n      }\\n      pageInfo {\\n        endCursor\\n        hasNextPage\\n        hasPreviousPage\\n      }\\n      userCount\\n    }\\n  }\\n\"])));","map":{"version":3,"names":["gql","searchQueryRepository","searchQueryUsers"],"sources":["/Users/xoor/Desktop/a/exersice/github_users/GithubUsers/src/graphql/query.ts"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport interface SearchQueryRepositoryNodeProps {\n  id: string;\n  name: string;\n  description: string;\n  url: string;\n  updatedAt: Date;\n  createdAt: Date;\n}\n\nexport interface SearchQueryRepositoryProps {\n  search: {\n    nodes: SearchQueryRepositoryNodeProps[];\n    pageInfo?: {\n      endCursor?: string;\n      hasNextPage: boolean;\n      hasPreviousPage: boolean;\n    };\n    repositoryCount?: number;\n  };\n}\n\nexport const searchQueryRepository = gql`\n  query Repository(\n    $query: String!\n    $type: SearchType!\n    $after: String\n    $first: Int\n  ) {\n    search(query: $query, type: $type, after: $after, first: $first) {\n      nodes {\n        ... on Repository {\n          name\n          description\n          url\n          updatedAt\n          createdAt\n          id\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      repositoryCount\n    }\n  }\n`;\n\nexport interface SearchQueryUsersNodeProps {\n  id: string;\n  email: string;\n  location: string;\n  name: string;\n  url: string;\n}\n\nexport interface SearchQueryUsersProps {\n  search: {\n    nodes: SearchQueryUsersNodeProps[];\n    pageInfo?: {\n      endCursor?: string;\n      hasNextPage: boolean;\n      hasPreviousPage: boolean;\n    };\n    userCount?: number;\n  };\n}\n\nexport const searchQueryUsers = gql`\n  query Users(\n    $query: String!\n    $type: SearchType!\n    $after: String\n    $first: Int\n  ) {\n    search(query: $query, type: $type, after: $after, first: $first) {\n      nodes {\n        ... on User {\n          id\n          email\n          location\n          name\n          url\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      userCount\n    }\n  }\n`;\n"],"mappings":"kMAAA,OAASA,GAAT,KAAoB,gBAApB,CAuBA,MAAO,IAAMC,sBAAqB,CAAGD,GAAH,6gBAA3B,CA+CP,MAAO,IAAME,iBAAgB,CAAGF,GAAH,2fAAtB"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\"\n});\nconst authLink = setContext((_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  return {\n    headers: { ...headers,\n      authorization: \"Bearer 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\"\n    }\n  };\n});\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        search: {\n          keyArgs: [\"query\"],\n\n          merge(existing, incoming, _ref2) {\n            let {\n              args\n            } = _ref2;\n            const existingNodes = (existing === null || existing === void 0 ? void 0 : existing.nodes) || [];\n            console.log(existing, incoming, args);\n\n            if (!(args !== null && args !== void 0 && args.after)) {\n              return incoming;\n            }\n\n            return { ...incoming,\n              nodes: [...existingNodes, ...incoming.nodes]\n            };\n          }\n\n        }\n      }\n    }\n  }\n});\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache\n});","map":{"version":3,"names":["ApolloClient","createHttpLink","InMemoryCache","setContext","httpLink","uri","authLink","_","headers","authorization","cache","typePolicies","Query","fields","search","keyArgs","merge","existing","incoming","args","existingNodes","nodes","console","log","after","client","link","concat"],"sources":["/Users/xoor/Desktop/a/exersice/github_users/GithubUsers/src/client.ts"],"sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: \"Bearer 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\",\n  },\n}));\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        search: {\n          keyArgs: [\"query\"],\n          merge(existing, incoming, { args }) {\n            const existingNodes = existing?.nodes || [];\n            console.log(existing, incoming, args);\n            if (!args?.after) {\n              return incoming;\n            }\n\n            return {\n              ...incoming,\n              nodes: [...existingNodes, ...incoming.nodes],\n            };\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n});\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;EAC9BI,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD;EAAA,IAAI;IAAEC;EAAF,CAAJ;EAAA,OAAqB;IAC/CA,OAAO,EAAE,EACP,GAAGA,OADI;MAEPC,aAAa,EAAE;IAFR;EADsC,CAArB;AAAA,CAAD,CAA3B;AAOA,MAAMC,KAAK,GAAG,IAAIR,aAAJ,CAAkB;EAC9BS,YAAY,EAAE;IACZC,KAAK,EAAE;MACLC,MAAM,EAAE;QACNC,MAAM,EAAE;UACNC,OAAO,EAAE,CAAC,OAAD,CADH;;UAENC,KAAK,CAACC,QAAD,EAAWC,QAAX,SAA+B;YAAA,IAAV;cAAEC;YAAF,CAAU;YAClC,MAAMC,aAAa,GAAG,CAAAH,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEI,KAAV,KAAmB,EAAzC;YACAC,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsBC,QAAtB,EAAgCC,IAAhC;;YACA,IAAI,EAACA,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEK,KAAP,CAAJ,EAAkB;cAChB,OAAON,QAAP;YACD;;YAED,OAAO,EACL,GAAGA,QADE;cAELG,KAAK,EAAE,CAAC,GAAGD,aAAJ,EAAmB,GAAGF,QAAQ,CAACG,KAA/B;YAFF,CAAP;UAID;;QAbK;MADF;IADH;EADK;AADgB,CAAlB,CAAd;AAwBA,OAAO,MAAMI,MAAM,GAAG,IAAIzB,YAAJ,CAAiB;EACrC0B,IAAI,EAAEpB,QAAQ,CAACqB,MAAT,CAAgBvB,QAAhB,CAD+B;EAErCM;AAFqC,CAAjB,CAAf"},"metadata":{},"sourceType":"module"}
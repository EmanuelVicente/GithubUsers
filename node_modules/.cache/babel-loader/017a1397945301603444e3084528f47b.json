{"ast":null,"code":"var _jsxFileName = \"/Users/xoor/Desktop/a/exersice/github_users/GithubUsers/src/screens/UsersSearch/UsersSearch.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useMemo } from 'react';\n//Components\nimport SearchBar from './../../components/SearchBar/SearchBar';\nimport Table from './../../components/Table/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserSearch = () => {\n  _s();\n\n  const [result, setResult] = useState({\n    data: {},\n    isLoading: false\n  }); // const { loading, error, data } = useQuery(searchQueryRepository, {\n  //   variables: {\n  //     query: \"ema\",\n  //     type: \"REPOSITORY\",\n  //     after: null,\n  //     first: 2,\n  //   }\n  // });\n\n  useMemo(() => {\n    var _result$data$search, _result$data$search$d, _result$data$search$d2;\n\n    return (_result$data$search = result.data.search) === null || _result$data$search === void 0 ? void 0 : (_result$data$search$d = _result$data$search.data) === null || _result$data$search$d === void 0 ? void 0 : (_result$data$search$d2 = _result$data$search$d.nodes) === null || _result$data$search$d2 === void 0 ? void 0 : _result$data$search$d2.map(node => [node.name, node.url, node.description, `${node.updatedAt.getDate()}/${node.updatedAt.getMonth()}/${node.updatedAt.getFullYear()}`, `${node.createdAt.getDate()}/${node.createdAt.getMonth()}/${node.createdAt.getFullYear()}`]);\n  }, []);\n  console.log(loading, error, data);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onChangeSearch: setResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      header: ['Name', 'Url', 'Description', 'Updated', 'Created'],\n      data: data.node\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserSearch, \"ciL8/NZVjtSEthkVZkSyk4Pgv5M=\");\n\n_c = UserSearch;\nexport default _c2 = /*#__PURE__*/memo(UserSearch);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserSearch\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","useState","useMemo","SearchBar","Table","UserSearch","result","setResult","data","isLoading","search","nodes","map","node","name","url","description","updatedAt","getDate","getMonth","getFullYear","createdAt","console","log","loading","error"],"sources":["/Users/xoor/Desktop/a/exersice/github_users/GithubUsers/src/screens/UsersSearch/UsersSearch.tsx"],"sourcesContent":["import React, { memo, useState, useMemo } from 'react';\nimport { useQuery } from '@apollo/client';\n\n//Graphql\nimport { SearchQueryRepositoryProps, SearchQueryRepositoryNodeProps } from '../../graphql/query';\n\n//Components\nimport SearchBar from './../../components/SearchBar/SearchBar';\nimport Table from './../../components/Table/Table';\n\nconst UserSearch = () => {\n  const [result, setResult] = useState<{ data: SearchQueryRepositoryProps, isLoading: boolean }>({ data: {}, isLoading: false });\n\n  // const { loading, error, data } = useQuery(searchQueryRepository, {\n  //   variables: {\n  //     query: \"ema\",\n  //     type: \"REPOSITORY\",\n  //     after: null,\n  //     first: 2,\n  //   }\n  // });\n\n  useMemo(() => result.data.search?.data?.nodes?.map(\n    (node: SearchQueryRepositoryNodeProps) => [\n      node.name,\n      node.url,\n      node.description,\n      `${node.updatedAt.getDate()}/${node.updatedAt.getMonth()}/${node.updatedAt.getFullYear()}`,\n      `${node.createdAt.getDate()}/${node.createdAt.getMonth()}/${node.createdAt.getFullYear()}`\n    ]), []);\n\n  console.log(loading, error, data);\n  return (\n    <>\n      <SearchBar onChangeSearch={setResult} />\n      <Table header={['Name', 'Url', 'Description', 'Updated', 'Created']} data={data.node} />\n    </>\n  )\n}\n\nexport default memo(UserSearch);\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,OAAhC,QAA+C,OAA/C;AAMA;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EACvB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAA2D;IAAEO,IAAI,EAAE,EAAR;IAAYC,SAAS,EAAE;EAAvB,CAA3D,CAApC,CADuB,CAGvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAP,OAAO,CAAC;IAAA;;IAAA,8BAAMI,MAAM,CAACE,IAAP,CAAYE,MAAlB,iFAAM,oBAAoBF,IAA1B,oFAAM,sBAA0BG,KAAhC,2DAAM,uBAAiCC,GAAjC,CACXC,IAAD,IAA0C,CACxCA,IAAI,CAACC,IADmC,EAExCD,IAAI,CAACE,GAFmC,EAGxCF,IAAI,CAACG,WAHmC,EAIvC,GAAEH,IAAI,CAACI,SAAL,CAAeC,OAAf,EAAyB,IAAGL,IAAI,CAACI,SAAL,CAAeE,QAAf,EAA0B,IAAGN,IAAI,CAACI,SAAL,CAAeG,WAAf,EAA6B,EAJjD,EAKvC,GAAEP,IAAI,CAACQ,SAAL,CAAeH,OAAf,EAAyB,IAAGL,IAAI,CAACQ,SAAL,CAAeF,QAAf,EAA0B,IAAGN,IAAI,CAACQ,SAAL,CAAeD,WAAf,EAA6B,EALjD,CAD9B,CAAN;EAAA,CAAD,EAOD,EAPC,CAAP;EASAE,OAAO,CAACC,GAAR,CAAYC,OAAZ,EAAqBC,KAArB,EAA4BjB,IAA5B;EACA,oBACE;IAAA,wBACE,QAAC,SAAD;MAAW,cAAc,EAAED;IAA3B;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,KAAD;MAAO,MAAM,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,aAAhB,EAA+B,SAA/B,EAA0C,SAA1C,CAAf;MAAqE,IAAI,EAAEC,IAAI,CAACK;IAAhF;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAMD,CA5BD;;GAAMR,U;;KAAAA,U;AA8BN,kCAAeL,IAAI,CAACK,UAAD,CAAnB"},"metadata":{},"sourceType":"module"}
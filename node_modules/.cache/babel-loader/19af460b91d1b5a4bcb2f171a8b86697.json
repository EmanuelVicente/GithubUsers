{"ast":null,"code":"import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\"\n});\nconst authLink = setContext((_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  return {\n    headers: { ...headers,\n      authorization: \"Bearer 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\"\n    }\n  };\n});\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        Users: {\n          keyArgs: [\"query\"],\n\n          // Concatenate the incoming list items with\n          // the existing list items.\n          merge(existing, incoming, _ref2) {\n            var _args$skip;\n\n            let {\n              args\n            } = _ref2;\n            const existingClients = (existing === null || existing === void 0 ? void 0 : existing.clients) || []; // eslint-disable-next-line no-console\n\n            if (((_args$skip = args === null || args === void 0 ? void 0 : args.skip) !== null && _args$skip !== void 0 ? _args$skip : 0) === 0) {\n              return incoming;\n            }\n\n            return { ...incoming,\n              clients: [...existingClients, ...incoming.clients]\n            };\n          }\n\n        }\n      }\n    }\n  }\n});\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});","map":{"version":3,"names":["ApolloClient","createHttpLink","InMemoryCache","setContext","httpLink","uri","authLink","_","headers","authorization","cache","typePolicies","Query","fields","Users","keyArgs","merge","existing","incoming","args","existingClients","clients","skip","client","link","concat"],"sources":["/Users/xoor/Desktop/a/exersice/github_users/GithubUsers/src/client.ts"],"sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: \"Bearer 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\",\n  },\n}));\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        Users: {\n          keyArgs: [\"query\"],\n          // Concatenate the incoming list items with\n          // the existing list items.\n          merge(existing, incoming, { args }) {\n            const existingClients = existing?.clients || [];\n            // eslint-disable-next-line no-console\n            if ((args?.skip ?? 0) === 0) {\n              return incoming;\n            }\n\n            return {\n              ...incoming,\n              clients: [...existingClients, ...incoming.clients],\n            };\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;EAC9BI,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD;EAAA,IAAI;IAAEC;EAAF,CAAJ;EAAA,OAAqB;IAC/CA,OAAO,EAAE,EACP,GAAGA,OADI;MAEPC,aAAa,EAAE;IAFR;EADsC,CAArB;AAAA,CAAD,CAA3B;AAOA,MAAMC,KAAK,GAAG,IAAIR,aAAJ,CAAkB;EAC9BS,YAAY,EAAE;IACZC,KAAK,EAAE;MACLC,MAAM,EAAE;QACNC,KAAK,EAAE;UACLC,OAAO,EAAE,CAAC,OAAD,CADJ;;UAEL;UACA;UACAC,KAAK,CAACC,QAAD,EAAWC,QAAX,SAA+B;YAAA;;YAAA,IAAV;cAAEC;YAAF,CAAU;YAClC,MAAMC,eAAe,GAAG,CAAAH,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEI,OAAV,KAAqB,EAA7C,CADkC,CAElC;;YACA,IAAI,eAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEG,IAAP,mDAAe,CAAf,MAAsB,CAA1B,EAA6B;cAC3B,OAAOJ,QAAP;YACD;;YAED,OAAO,EACL,GAAGA,QADE;cAELG,OAAO,EAAE,CAAC,GAAGD,eAAJ,EAAqB,GAAGF,QAAQ,CAACG,OAAjC;YAFJ,CAAP;UAID;;QAfI;MADD;IADH;EADK;AADgB,CAAlB,CAAd;AA0BA,OAAO,MAAME,MAAM,GAAG,IAAIvB,YAAJ,CAAiB;EACrCwB,IAAI,EAAElB,QAAQ,CAACmB,MAAT,CAAgBrB,QAAhB,CAD+B;EAErCM,KAAK,EAAE,IAAIR,aAAJ;AAF8B,CAAjB,CAAf"},"metadata":{},"sourceType":"module"}